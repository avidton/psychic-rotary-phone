## Class Diagram

```mermaid
classDiagram

MemberAccess <|.. Member
LibrarianAccess <|.. Librarian
Item <|.. Book


Person <|-- Librarian
Person <|-- Member
Person <|-- Developer 
BokIntervace <|-- LibrarianAccess
BookIntervace <|-- MemberAccess
BookList "1" <-- "n" Book:is part of
class Person {a
	Id: Int
	Name: String
	LastName: String
	Kontakt: String
	}
	
class Member {
	borrowedBooks:List[Book]
	memberStatus:Int
	borrow(Book):Unit
	returnBook(Book):Book
	isBanned():Boolean
}
class Developer {
	developerId: Int
}
class Librarian{

}

class Develop{a
<<interface>>
	access(Int)}

class BookIntervace{a
<<interface>> 
listOfBooks: Booklist
seeBook():List[String]
}

class LibrarianAccess{a
<<interface>>
changeState(Book):Unit
seeBorrower():List[Member]}

class MemberAcces{a
<<interface>>
borrowBook(Book):Unit
retrunBook(Book):Unit}

class Book{
	bookId:Int
	bookName:String
	borrowed:Boolean
	}
class BookList{
	listOfBooks: List[Book]
	getBorrowed():List[Book]
	getBorrowedBooks():List[Book]
	getAllBooks():List[Book]
	borrowBook(Book):Unit
	returnBook(Book):Unit}
```
	











class User {a
	<<interface>>
	userId: Int
	seeBookCatalogue(BookCatalogue): BookCatalogue
	searchBook(String): List<Books>
	seeBookInfos(Book): Unit
}

class Member {
	messages: List<String>
	listOfBooks: BookCatalogue
	isBorrowedTill(Book): Unit
	borrowBook(Book): Unit
	returnBook(Book): Unit
	seeMyBorrowedBooks(): Unit
	readMessages(): Unit
}

class Librarian {
	addBook(Book, BookCatalogue): Unit
	removeBook(Book, BookCatalogue): Unit
	setBookTitle(Book, String): Unit
	setBookDamage(Book, Boolean): Unit
	seeMemberInfo(Member): Unit
	remindMember(Member, Book): Unit
}

class Item {
	<<interface>>
	title: String
}

class Book {
	borrowed: Boolean
	borrowedTill: String
	borrowedBy: Member
	damaged: Boolean
	isBorrowedTill(): String
	setBookTitle(): Unit
	setDamaged(Boolean): Unit
	setBorrowed(Boolean): Unit
	setBorrowedTill(String): Unit
	printBook(): Unit
}

class Catalogue {
<<interface>>
	searchTitle(String): Catalogue
	addToCatalogue(<I>): Unit
	removeFromCatalogue(<I>): Unit
	printCatalogue(): Unit
}

class BookCatalogue {
	booklist: List<Book>
	filterBooksTitle(String): BookCatalogue
	filterBooksBorrowed(Boolean): BookCatalogue
	amountOfBooks(String): BookCatalogue
}
```


Member and Librarian are using the User interface.
Book is using the Item interface.
BookCatalogue is using the Catalogue interface.

## Member

- has BookCatalogue with its borrowed Books.
- can searchBooks by title.
- can borrowBooks when they are not borrowed.
- receives a message by the librarian when he has to return the book.

## Librarian

- add/remove books to/from BookCatalogue.
- change Book metadata
- has to remind Member 7 days before he has to return a Book.
- NOTE: This design doesn't automatically notify the user, the Librarian has to check himself if there is Books to be returned.

## Book

- has title.
- can be borrowed or not by a Member.
- can be damaged.

## BookCatalogue

- this is a List of Book with methods to search Books or filter by title / borrowed-status.


## Modularity
The code is seperated in two different Sides on one Side the Persons interacting with the Libaray and on the Other the books contained in the Libary
The Pweosns can interact with the books over their respective Interfaces Modular Composavility is therefore satisfyed. Modular Understandability is given a 
reader doesnt have to understand how the booklist or the different Persons work to get a udnerstadning what the others jib is.
Modular Continuity depending on the change needed but chaning the options avavibale to different persons only needs to change the corresponsing interface.
Modular Protection depens on the individuall way some functions are implemented but if done correctly a error on the Person side should not
affect the List of Books and vice versa.
